/* tslint:disable */
/* eslint-disable */
/**
 * django-allauth: Headless API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllauthClientV1AuthSessionsGet200Response,
  AuthenticationResponse,
  EndSessions,
} from '../models/index';
import {
    AllauthClientV1AuthSessionsGet200ResponseFromJSON,
    AllauthClientV1AuthSessionsGet200ResponseToJSON,
    AuthenticationResponseFromJSON,
    AuthenticationResponseToJSON,
    EndSessionsFromJSON,
    EndSessionsToJSON,
} from '../models/index';

export interface AllauthClientV1AuthSessionsDeleteRequest {
    client: AllauthClientV1AuthSessionsDeleteClientEnum;
    endSessions: EndSessions;
    xSessionToken?: string;
}

export interface AllauthClientV1AuthSessionsGetRequest {
    client: AllauthClientV1AuthSessionsGetClientEnum;
    xSessionToken?: string;
}

/**
 * 
 */
export class SessionsApi extends runtime.BaseAPI {

    /**
     * End one or more sessions
     */
    async allauthClientV1AuthSessionsDeleteRaw(requestParameters: AllauthClientV1AuthSessionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AuthSessionsGet200Response>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AuthSessionsDelete().'
            );
        }

        if (requestParameters['endSessions'] == null) {
            throw new runtime.RequiredError(
                'endSessions',
                'Required parameter "endSessions" was null or undefined when calling allauthClientV1AuthSessionsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/auth/sessions`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: EndSessionsToJSON(requestParameters['endSessions']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AuthSessionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * End one or more sessions
     */
    async allauthClientV1AuthSessionsDelete(requestParameters: AllauthClientV1AuthSessionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AuthSessionsGet200Response> {
        const response = await this.allauthClientV1AuthSessionsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List sessions
     */
    async allauthClientV1AuthSessionsGetRaw(requestParameters: AllauthClientV1AuthSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AuthSessionsGet200Response>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AuthSessionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/auth/sessions`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AuthSessionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * List sessions
     */
    async allauthClientV1AuthSessionsGet(requestParameters: AllauthClientV1AuthSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AuthSessionsGet200Response> {
        const response = await this.allauthClientV1AuthSessionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AllauthClientV1AuthSessionsDeleteClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AuthSessionsDeleteClientEnum = typeof AllauthClientV1AuthSessionsDeleteClientEnum[keyof typeof AllauthClientV1AuthSessionsDeleteClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthSessionsGetClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AuthSessionsGetClientEnum = typeof AllauthClientV1AuthSessionsGetClientEnum[keyof typeof AllauthClientV1AuthSessionsGetClientEnum];
