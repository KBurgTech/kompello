/* tslint:disable */
/* eslint-disable */
/**
 * django-allauth: Headless API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllauthClientV1AccountAuthenticatorsWebauthnDeleteRequest,
  AllauthClientV1AccountAuthenticatorsWebauthnGet200Response,
  AllauthClientV1AccountAuthenticatorsWebauthnPost200Response,
  AllauthClientV1AccountAuthenticatorsWebauthnPut200Response,
  AllauthClientV1AccountAuthenticatorsWebauthnPutRequest,
  AllauthClientV1AuthEmailVerifyResendPost200Response,
  AllauthClientV1AuthWebauthnSignupPutRequest,
  ConflictResponse,
} from '../models/index';
import {
    AllauthClientV1AccountAuthenticatorsWebauthnDeleteRequestFromJSON,
    AllauthClientV1AccountAuthenticatorsWebauthnDeleteRequestToJSON,
    AllauthClientV1AccountAuthenticatorsWebauthnGet200ResponseFromJSON,
    AllauthClientV1AccountAuthenticatorsWebauthnGet200ResponseToJSON,
    AllauthClientV1AccountAuthenticatorsWebauthnPost200ResponseFromJSON,
    AllauthClientV1AccountAuthenticatorsWebauthnPost200ResponseToJSON,
    AllauthClientV1AccountAuthenticatorsWebauthnPut200ResponseFromJSON,
    AllauthClientV1AccountAuthenticatorsWebauthnPut200ResponseToJSON,
    AllauthClientV1AccountAuthenticatorsWebauthnPutRequestFromJSON,
    AllauthClientV1AccountAuthenticatorsWebauthnPutRequestToJSON,
    AllauthClientV1AuthEmailVerifyResendPost200ResponseFromJSON,
    AllauthClientV1AuthEmailVerifyResendPost200ResponseToJSON,
    AllauthClientV1AuthWebauthnSignupPutRequestFromJSON,
    AllauthClientV1AuthWebauthnSignupPutRequestToJSON,
    ConflictResponseFromJSON,
    ConflictResponseToJSON,
} from '../models/index';

export interface AllauthClientV1AccountAuthenticatorsWebauthnDeleteOperationRequest {
    client: AllauthClientV1AccountAuthenticatorsWebauthnDeleteOperationClientEnum;
    xSessionToken?: string;
    allauthClientV1AccountAuthenticatorsWebauthnDeleteRequest?: AllauthClientV1AccountAuthenticatorsWebauthnDeleteRequest;
}

export interface AllauthClientV1AccountAuthenticatorsWebauthnGetRequest {
    client: AllauthClientV1AccountAuthenticatorsWebauthnGetClientEnum;
    xSessionToken?: string;
}

export interface AllauthClientV1AccountAuthenticatorsWebauthnPostRequest {
    client: AllauthClientV1AccountAuthenticatorsWebauthnPostClientEnum;
    xSessionToken?: string;
    allauthClientV1AuthWebauthnSignupPutRequest?: AllauthClientV1AuthWebauthnSignupPutRequest;
}

export interface AllauthClientV1AccountAuthenticatorsWebauthnPutOperationRequest {
    client: AllauthClientV1AccountAuthenticatorsWebauthnPutOperationClientEnum;
    xSessionToken?: string;
    allauthClientV1AccountAuthenticatorsWebauthnPutRequest?: AllauthClientV1AccountAuthenticatorsWebauthnPutRequest;
}

/**
 * 
 */
export class AccountWebAuthnApi extends runtime.BaseAPI {

    /**
     * Delete a WebAuthn credential 
     */
    async allauthClientV1AccountAuthenticatorsWebauthnDeleteRaw(requestParameters: AllauthClientV1AccountAuthenticatorsWebauthnDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AuthEmailVerifyResendPost200Response>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AccountAuthenticatorsWebauthnDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/account/authenticators/webauthn`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AllauthClientV1AccountAuthenticatorsWebauthnDeleteRequestToJSON(requestParameters['allauthClientV1AccountAuthenticatorsWebauthnDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AuthEmailVerifyResendPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a WebAuthn credential 
     */
    async allauthClientV1AccountAuthenticatorsWebauthnDelete(requestParameters: AllauthClientV1AccountAuthenticatorsWebauthnDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AuthEmailVerifyResendPost200Response> {
        const response = await this.allauthClientV1AccountAuthenticatorsWebauthnDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the WebAuthn credential creation options, that can be processed using `parseCreationOptionsFromJSON()` on the frontend. 
     * Get WebAuthn credential creation options 
     */
    async allauthClientV1AccountAuthenticatorsWebauthnGetRaw(requestParameters: AllauthClientV1AccountAuthenticatorsWebauthnGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AccountAuthenticatorsWebauthnGet200Response>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AccountAuthenticatorsWebauthnGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/account/authenticators/webauthn`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AccountAuthenticatorsWebauthnGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the WebAuthn credential creation options, that can be processed using `parseCreationOptionsFromJSON()` on the frontend. 
     * Get WebAuthn credential creation options 
     */
    async allauthClientV1AccountAuthenticatorsWebauthnGet(requestParameters: AllauthClientV1AccountAuthenticatorsWebauthnGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AccountAuthenticatorsWebauthnGet200Response> {
        const response = await this.allauthClientV1AccountAuthenticatorsWebauthnGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a WebAuthn credential 
     */
    async allauthClientV1AccountAuthenticatorsWebauthnPostRaw(requestParameters: AllauthClientV1AccountAuthenticatorsWebauthnPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AccountAuthenticatorsWebauthnPost200Response>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AccountAuthenticatorsWebauthnPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/account/authenticators/webauthn`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllauthClientV1AuthWebauthnSignupPutRequestToJSON(requestParameters['allauthClientV1AuthWebauthnSignupPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AccountAuthenticatorsWebauthnPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a WebAuthn credential 
     */
    async allauthClientV1AccountAuthenticatorsWebauthnPost(requestParameters: AllauthClientV1AccountAuthenticatorsWebauthnPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AccountAuthenticatorsWebauthnPost200Response> {
        const response = await this.allauthClientV1AccountAuthenticatorsWebauthnPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can alter the name of a WebAuthn credential by PUT\'ting the ID and name of the authenticator representing that credential. You can obtain the credentials via the \"List authenticators\" endpoint. 
     * Rename a WebAuthn credential 
     */
    async allauthClientV1AccountAuthenticatorsWebauthnPutRaw(requestParameters: AllauthClientV1AccountAuthenticatorsWebauthnPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AccountAuthenticatorsWebauthnPut200Response>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AccountAuthenticatorsWebauthnPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/account/authenticators/webauthn`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AllauthClientV1AccountAuthenticatorsWebauthnPutRequestToJSON(requestParameters['allauthClientV1AccountAuthenticatorsWebauthnPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AccountAuthenticatorsWebauthnPut200ResponseFromJSON(jsonValue));
    }

    /**
     * You can alter the name of a WebAuthn credential by PUT\'ting the ID and name of the authenticator representing that credential. You can obtain the credentials via the \"List authenticators\" endpoint. 
     * Rename a WebAuthn credential 
     */
    async allauthClientV1AccountAuthenticatorsWebauthnPut(requestParameters: AllauthClientV1AccountAuthenticatorsWebauthnPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AccountAuthenticatorsWebauthnPut200Response> {
        const response = await this.allauthClientV1AccountAuthenticatorsWebauthnPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AllauthClientV1AccountAuthenticatorsWebauthnDeleteOperationClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AccountAuthenticatorsWebauthnDeleteOperationClientEnum = typeof AllauthClientV1AccountAuthenticatorsWebauthnDeleteOperationClientEnum[keyof typeof AllauthClientV1AccountAuthenticatorsWebauthnDeleteOperationClientEnum];
/**
 * @export
 */
export const AllauthClientV1AccountAuthenticatorsWebauthnGetClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AccountAuthenticatorsWebauthnGetClientEnum = typeof AllauthClientV1AccountAuthenticatorsWebauthnGetClientEnum[keyof typeof AllauthClientV1AccountAuthenticatorsWebauthnGetClientEnum];
/**
 * @export
 */
export const AllauthClientV1AccountAuthenticatorsWebauthnPostClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AccountAuthenticatorsWebauthnPostClientEnum = typeof AllauthClientV1AccountAuthenticatorsWebauthnPostClientEnum[keyof typeof AllauthClientV1AccountAuthenticatorsWebauthnPostClientEnum];
/**
 * @export
 */
export const AllauthClientV1AccountAuthenticatorsWebauthnPutOperationClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AccountAuthenticatorsWebauthnPutOperationClientEnum = typeof AllauthClientV1AccountAuthenticatorsWebauthnPutOperationClientEnum[keyof typeof AllauthClientV1AccountAuthenticatorsWebauthnPutOperationClientEnum];
