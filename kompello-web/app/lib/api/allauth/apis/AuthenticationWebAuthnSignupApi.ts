/* tslint:disable */
/* eslint-disable */
/**
 * django-allauth: Headless API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllauthClientV1AuthWebauthnAuthenticateGet200Response,
  AllauthClientV1AuthWebauthnSignupPutRequest,
  AuthenticatedResponse,
  AuthenticationResponse,
  ConflictResponse,
  ErrorResponse,
  ForbiddenResponse,
  PasskeySignup,
} from '../models/index';
import {
    AllauthClientV1AuthWebauthnAuthenticateGet200ResponseFromJSON,
    AllauthClientV1AuthWebauthnAuthenticateGet200ResponseToJSON,
    AllauthClientV1AuthWebauthnSignupPutRequestFromJSON,
    AllauthClientV1AuthWebauthnSignupPutRequestToJSON,
    AuthenticatedResponseFromJSON,
    AuthenticatedResponseToJSON,
    AuthenticationResponseFromJSON,
    AuthenticationResponseToJSON,
    ConflictResponseFromJSON,
    ConflictResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ForbiddenResponseFromJSON,
    ForbiddenResponseToJSON,
    PasskeySignupFromJSON,
    PasskeySignupToJSON,
} from '../models/index';

export interface AllauthClientV1AuthWebauthnSignupGetRequest {
    client: AllauthClientV1AuthWebauthnSignupGetClientEnum;
    xSessionToken?: string;
}

export interface AllauthClientV1AuthWebauthnSignupPostRequest {
    client: AllauthClientV1AuthWebauthnSignupPostClientEnum;
    passkeySignup: PasskeySignup;
    xSessionToken?: string;
}

export interface AllauthClientV1AuthWebauthnSignupPutOperationRequest {
    client: AllauthClientV1AuthWebauthnSignupPutOperationClientEnum;
    xSessionToken?: string;
    allauthClientV1AuthWebauthnSignupPutRequest?: AllauthClientV1AuthWebauthnSignupPutRequest;
}

/**
 * 
 */
export class AuthenticationWebAuthnSignupApi extends runtime.BaseAPI {

    /**
     * Returns the WebAuthn credential request options, that can be processed using `parseRequestOptionsFromJSON()` on the frontend. 
     * Get passkey credential request options
     */
    async allauthClientV1AuthWebauthnSignupGetRaw(requestParameters: AllauthClientV1AuthWebauthnSignupGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AuthWebauthnAuthenticateGet200Response>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AuthWebauthnSignupGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/auth/webauthn/signup`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AuthWebauthnAuthenticateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the WebAuthn credential request options, that can be processed using `parseRequestOptionsFromJSON()` on the frontend. 
     * Get passkey credential request options
     */
    async allauthClientV1AuthWebauthnSignupGet(requestParameters: AllauthClientV1AuthWebauthnSignupGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AuthWebauthnAuthenticateGet200Response> {
        const response = await this.allauthClientV1AuthWebauthnSignupGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You initiate the passkey signup flow by inputting (`POST`) the required properties (e.g. email) similar to the regular account signup, except that the `password` is to be left out. The user will then be required to verify the email address, after which WebAuthn credential creation options can be retrieved (`GET`) and used to actualy complete (`PUT`) the flow. 
     * Initiate the passkey signup flow
     */
    async allauthClientV1AuthWebauthnSignupPostRaw(requestParameters: AllauthClientV1AuthWebauthnSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AuthWebauthnSignupPost().'
            );
        }

        if (requestParameters['passkeySignup'] == null) {
            throw new runtime.RequiredError(
                'passkeySignup',
                'Required parameter "passkeySignup" was null or undefined when calling allauthClientV1AuthWebauthnSignupPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/auth/webauthn/signup`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeySignupToJSON(requestParameters['passkeySignup']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * You initiate the passkey signup flow by inputting (`POST`) the required properties (e.g. email) similar to the regular account signup, except that the `password` is to be left out. The user will then be required to verify the email address, after which WebAuthn credential creation options can be retrieved (`GET`) and used to actualy complete (`PUT`) the flow. 
     * Initiate the passkey signup flow
     */
    async allauthClientV1AuthWebauthnSignupPost(requestParameters: AllauthClientV1AuthWebauthnSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.allauthClientV1AuthWebauthnSignupPostRaw(requestParameters, initOverrides);
    }

    /**
     * Complete the passkey signup flow by handing over the WebAuthn credential. 
     * Complete the passkey signup flow
     */
    async allauthClientV1AuthWebauthnSignupPutRaw(requestParameters: AllauthClientV1AuthWebauthnSignupPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedResponse>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AuthWebauthnSignupPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/auth/webauthn/signup`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AllauthClientV1AuthWebauthnSignupPutRequestToJSON(requestParameters['allauthClientV1AuthWebauthnSignupPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedResponseFromJSON(jsonValue));
    }

    /**
     * Complete the passkey signup flow by handing over the WebAuthn credential. 
     * Complete the passkey signup flow
     */
    async allauthClientV1AuthWebauthnSignupPut(requestParameters: AllauthClientV1AuthWebauthnSignupPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedResponse> {
        const response = await this.allauthClientV1AuthWebauthnSignupPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AllauthClientV1AuthWebauthnSignupGetClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AuthWebauthnSignupGetClientEnum = typeof AllauthClientV1AuthWebauthnSignupGetClientEnum[keyof typeof AllauthClientV1AuthWebauthnSignupGetClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthWebauthnSignupPostClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AuthWebauthnSignupPostClientEnum = typeof AllauthClientV1AuthWebauthnSignupPostClientEnum[keyof typeof AllauthClientV1AuthWebauthnSignupPostClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthWebauthnSignupPutOperationClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AuthWebauthnSignupPutOperationClientEnum = typeof AllauthClientV1AuthWebauthnSignupPutOperationClientEnum[keyof typeof AllauthClientV1AuthWebauthnSignupPutOperationClientEnum];
