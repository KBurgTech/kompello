/* tslint:disable */
/* eslint-disable */
/**
 * django-allauth: Headless API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllauthClientV1AuthWebauthnAuthenticateGet200Response,
  AllauthClientV1AuthWebauthnAuthenticatePostRequest,
  AuthenticatedResponse,
  AuthenticationResponse,
  ErrorResponse,
} from '../models/index';
import {
    AllauthClientV1AuthWebauthnAuthenticateGet200ResponseFromJSON,
    AllauthClientV1AuthWebauthnAuthenticateGet200ResponseToJSON,
    AllauthClientV1AuthWebauthnAuthenticatePostRequestFromJSON,
    AllauthClientV1AuthWebauthnAuthenticatePostRequestToJSON,
    AuthenticatedResponseFromJSON,
    AuthenticatedResponseToJSON,
    AuthenticationResponseFromJSON,
    AuthenticationResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface AllauthClientV1AuthWebauthnAuthenticateGetRequest {
    client: AllauthClientV1AuthWebauthnAuthenticateGetClientEnum;
    xSessionToken?: string;
}

export interface AllauthClientV1AuthWebauthnAuthenticatePostOperationRequest {
    client: AllauthClientV1AuthWebauthnAuthenticatePostOperationClientEnum;
    allauthClientV1AuthWebauthnAuthenticatePostRequest: AllauthClientV1AuthWebauthnAuthenticatePostRequest;
    xSessionToken?: string;
}

export interface AllauthClientV1AuthWebauthnLoginGetRequest {
    client: AllauthClientV1AuthWebauthnLoginGetClientEnum;
    xSessionToken?: string;
}

export interface AllauthClientV1AuthWebauthnLoginPostRequest {
    client: AllauthClientV1AuthWebauthnLoginPostClientEnum;
    allauthClientV1AuthWebauthnAuthenticatePostRequest: AllauthClientV1AuthWebauthnAuthenticatePostRequest;
    xSessionToken?: string;
}

export interface AllauthClientV1AuthWebauthnReauthenticateGetRequest {
    client: AllauthClientV1AuthWebauthnReauthenticateGetClientEnum;
    xSessionToken?: string;
}

export interface AllauthClientV1AuthWebauthnReauthenticatePostRequest {
    client: AllauthClientV1AuthWebauthnReauthenticatePostClientEnum;
    allauthClientV1AuthWebauthnAuthenticatePostRequest: AllauthClientV1AuthWebauthnAuthenticatePostRequest;
    xSessionToken?: string;
}

/**
 * 
 */
export class AuthenticationWebAuthnLoginApi extends runtime.BaseAPI {

    /**
     * Returns the WebAuthn credential request options, that can be processed using `parseRequestOptionsFromJSON()` on the frontend. 
     * Get WebAuthn credential request options for 2FA
     */
    async allauthClientV1AuthWebauthnAuthenticateGetRaw(requestParameters: AllauthClientV1AuthWebauthnAuthenticateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AuthWebauthnAuthenticateGet200Response>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AuthWebauthnAuthenticateGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/auth/webauthn/authenticate`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AuthWebauthnAuthenticateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the WebAuthn credential request options, that can be processed using `parseRequestOptionsFromJSON()` on the frontend. 
     * Get WebAuthn credential request options for 2FA
     */
    async allauthClientV1AuthWebauthnAuthenticateGet(requestParameters: AllauthClientV1AuthWebauthnAuthenticateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AuthWebauthnAuthenticateGet200Response> {
        const response = await this.allauthClientV1AuthWebauthnAuthenticateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform Two-Factor Authentication using a WebAuthn credential. 
     * Perform 2FA using WebAuthn
     */
    async allauthClientV1AuthWebauthnAuthenticatePostRaw(requestParameters: AllauthClientV1AuthWebauthnAuthenticatePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedResponse>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AuthWebauthnAuthenticatePost().'
            );
        }

        if (requestParameters['allauthClientV1AuthWebauthnAuthenticatePostRequest'] == null) {
            throw new runtime.RequiredError(
                'allauthClientV1AuthWebauthnAuthenticatePostRequest',
                'Required parameter "allauthClientV1AuthWebauthnAuthenticatePostRequest" was null or undefined when calling allauthClientV1AuthWebauthnAuthenticatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/auth/webauthn/authenticate`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllauthClientV1AuthWebauthnAuthenticatePostRequestToJSON(requestParameters['allauthClientV1AuthWebauthnAuthenticatePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedResponseFromJSON(jsonValue));
    }

    /**
     * Perform Two-Factor Authentication using a WebAuthn credential. 
     * Perform 2FA using WebAuthn
     */
    async allauthClientV1AuthWebauthnAuthenticatePost(requestParameters: AllauthClientV1AuthWebauthnAuthenticatePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedResponse> {
        const response = await this.allauthClientV1AuthWebauthnAuthenticatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the WebAuthn credential request options, that can be processed using `parseRequestOptionsFromJSON()` on the frontend. 
     * Get WebAuthn credential request options for login
     */
    async allauthClientV1AuthWebauthnLoginGetRaw(requestParameters: AllauthClientV1AuthWebauthnLoginGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AuthWebauthnAuthenticateGet200Response>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AuthWebauthnLoginGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/auth/webauthn/login`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AuthWebauthnAuthenticateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the WebAuthn credential request options, that can be processed using `parseRequestOptionsFromJSON()` on the frontend. 
     * Get WebAuthn credential request options for login
     */
    async allauthClientV1AuthWebauthnLoginGet(requestParameters: AllauthClientV1AuthWebauthnLoginGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AuthWebauthnAuthenticateGet200Response> {
        const response = await this.allauthClientV1AuthWebauthnLoginGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login using a WebAuthn credential (Passkey). Both 200 and 401 can be expected after a successful request.  The 401 can, for example, occur when the credential passed was valid, but the email attached to the account still requires verification. 
     * Login using WebAuthn
     */
    async allauthClientV1AuthWebauthnLoginPostRaw(requestParameters: AllauthClientV1AuthWebauthnLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedResponse>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AuthWebauthnLoginPost().'
            );
        }

        if (requestParameters['allauthClientV1AuthWebauthnAuthenticatePostRequest'] == null) {
            throw new runtime.RequiredError(
                'allauthClientV1AuthWebauthnAuthenticatePostRequest',
                'Required parameter "allauthClientV1AuthWebauthnAuthenticatePostRequest" was null or undefined when calling allauthClientV1AuthWebauthnLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/auth/webauthn/login`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllauthClientV1AuthWebauthnAuthenticatePostRequestToJSON(requestParameters['allauthClientV1AuthWebauthnAuthenticatePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedResponseFromJSON(jsonValue));
    }

    /**
     * Login using a WebAuthn credential (Passkey). Both 200 and 401 can be expected after a successful request.  The 401 can, for example, occur when the credential passed was valid, but the email attached to the account still requires verification. 
     * Login using WebAuthn
     */
    async allauthClientV1AuthWebauthnLoginPost(requestParameters: AllauthClientV1AuthWebauthnLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedResponse> {
        const response = await this.allauthClientV1AuthWebauthnLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the WebAuthn credential request options, that can be processed using `parseRequestOptionsFromJSON()` on the frontend. 
     * Get WebAuthn credential request options for reauthentication
     */
    async allauthClientV1AuthWebauthnReauthenticateGetRaw(requestParameters: AllauthClientV1AuthWebauthnReauthenticateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AuthWebauthnAuthenticateGet200Response>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AuthWebauthnReauthenticateGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/auth/webauthn/reauthenticate`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AuthWebauthnAuthenticateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the WebAuthn credential request options, that can be processed using `parseRequestOptionsFromJSON()` on the frontend. 
     * Get WebAuthn credential request options for reauthentication
     */
    async allauthClientV1AuthWebauthnReauthenticateGet(requestParameters: AllauthClientV1AuthWebauthnReauthenticateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AuthWebauthnAuthenticateGet200Response> {
        const response = await this.allauthClientV1AuthWebauthnReauthenticateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reauthenticate the user using a WebAuthn credential. 
     * Reauthenticate using WebAuthn
     */
    async allauthClientV1AuthWebauthnReauthenticatePostRaw(requestParameters: AllauthClientV1AuthWebauthnReauthenticatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedResponse>> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling allauthClientV1AuthWebauthnReauthenticatePost().'
            );
        }

        if (requestParameters['allauthClientV1AuthWebauthnAuthenticatePostRequest'] == null) {
            throw new runtime.RequiredError(
                'allauthClientV1AuthWebauthnAuthenticatePostRequest',
                'Required parameter "allauthClientV1AuthWebauthnAuthenticatePostRequest" was null or undefined when calling allauthClientV1AuthWebauthnReauthenticatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xSessionToken'] != null) {
            headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
        }

        const response = await this.request({
            path: `/_allauth/{client}/v1/auth/webauthn/reauthenticate`.replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllauthClientV1AuthWebauthnAuthenticatePostRequestToJSON(requestParameters['allauthClientV1AuthWebauthnAuthenticatePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedResponseFromJSON(jsonValue));
    }

    /**
     * Reauthenticate the user using a WebAuthn credential. 
     * Reauthenticate using WebAuthn
     */
    async allauthClientV1AuthWebauthnReauthenticatePost(requestParameters: AllauthClientV1AuthWebauthnReauthenticatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedResponse> {
        const response = await this.allauthClientV1AuthWebauthnReauthenticatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AllauthClientV1AuthWebauthnAuthenticateGetClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AuthWebauthnAuthenticateGetClientEnum = typeof AllauthClientV1AuthWebauthnAuthenticateGetClientEnum[keyof typeof AllauthClientV1AuthWebauthnAuthenticateGetClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthWebauthnAuthenticatePostOperationClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AuthWebauthnAuthenticatePostOperationClientEnum = typeof AllauthClientV1AuthWebauthnAuthenticatePostOperationClientEnum[keyof typeof AllauthClientV1AuthWebauthnAuthenticatePostOperationClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthWebauthnLoginGetClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AuthWebauthnLoginGetClientEnum = typeof AllauthClientV1AuthWebauthnLoginGetClientEnum[keyof typeof AllauthClientV1AuthWebauthnLoginGetClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthWebauthnLoginPostClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AuthWebauthnLoginPostClientEnum = typeof AllauthClientV1AuthWebauthnLoginPostClientEnum[keyof typeof AllauthClientV1AuthWebauthnLoginPostClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthWebauthnReauthenticateGetClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AuthWebauthnReauthenticateGetClientEnum = typeof AllauthClientV1AuthWebauthnReauthenticateGetClientEnum[keyof typeof AllauthClientV1AuthWebauthnReauthenticateGetClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthWebauthnReauthenticatePostClientEnum = {
    App: 'app',
    Browser: 'browser'
} as const;
export type AllauthClientV1AuthWebauthnReauthenticatePostClientEnum = typeof AllauthClientV1AuthWebauthnReauthenticatePostClientEnum[keyof typeof AllauthClientV1AuthWebauthnReauthenticatePostClientEnum];
